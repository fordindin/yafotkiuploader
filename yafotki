#!/usr/bin/env python
# -*- coding: utf-8 -*-

####
# 05/2008 Alexander Atemenko <svetlyak.40wt@gmail.com>
#
# Special thanks to:
# Grigory Bakunov <bobuk@justos.org>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import getpass
import itertools
import logging
import os
import sys
import locale

from optparse import OptionParser

import YaFotkiLib
import sys;reload(sys);sys.setdefaultencoding("utf-8")

def getLastURLs(user, album, limit=1):
    try:
        import feedparser
    except:
        sys.stderr.write('Please install feedparser.py to get URL of last uploaded images\n')
        return
    feed = feedparser.parse('http://fotki.yandex.ru/users/%s/album/%s/atom' % (user, album))
    for entry in feed.entries:
        limit -= 1
        if limit >= 0:
            yield entry.link
        else:
            break
    del feed
    return

CONFIG_PATH = '~/.fotki.conf'
COOKIES_CACHE = '~/.fotki.cookies'

_conf = None
def config(conffile=CONFIG_PATH):
    '''Simple config loader with singleton instance'''
    global _conf
    if _conf:
        return _conf
    res = {}

    conffile = os.path.expanduser(conffile)
    if os.path.isfile(conffile):
        for line in (x.strip() for x in open(conffile).readlines()):
            if '=' not in line:
                [key, value] = [line, True]
            else:
                [key, value] = [x.strip() for x in line.split('=')]
            res[key] = value
    _conf = res
    return _conf

def print_albums(albums):
    for i, album in itertools.izip(xrange(1, len(albums)+1), albums):
        print '%i) "%s"' % (i, album[1])

def init_uploader(options):
    username = options.username
    if not username:
        if 'username' in config():
            username = config()['username']
        else:
            print 'Please, specify username'
            sys.exit(2)

    password = options.password
    if not password:
        if 'password' in config():
            password = config()['password']

    yafotki = YaFotkiLib.Uploader(
            username=username,
            password=password,
            password_callback=lambda: getpass.getpass('Input password: '),
            cookies_cache = 'use_cookies_cache' in config() and COOKIES_CACHE,
            )

    yafotki.auth()
    return yafotki

def check_and_get_albums(yafotki, options, needalbum=False):
    albums = yafotki.get_albums()

    if needalbum:
        if not options.album:
            print 'Please, specify an album\'s ID'
            print_albums(albums)
            sys.exit(2)
        if options.album < 1 or options.album > len(albums):
            print 'Wrong album number.'
            sys.exit(4)
    return albums


def main():
    parser = OptionParser()
    parser.add_option( '-d', '--debug', dest='debug', action='store_true', help='Output debug information.', default=False)
    parser.add_option( '--version', dest='version', action='store_true', help='Show version number and quit.', default=False)
    parser.add_option( '-u', '--user', dest='username', help='Your Yandex login.', default=None)
    parser.add_option( '-p', '--pass', dest='password', help='Your password.', default=None)
    parser.add_option( '--albums', action='store_true', dest='album_list', help='Show album list.', default=False)
    parser.add_option( '--url', action='store_true', dest='last_list', help='Show last uploaded images.', default=False)
    parser.add_option( '-a', '--album', dest='album', type='int', help='Album to upload to.', default=config().get('default_album', None))
    parser.add_option( '--upload', dest='upload', action='store_true', help='File list to upload (obsolete).', default=False)
    (options, args) = parser.parse_args()

    if options.version:
        print('Python uploader for http://fotki.yandex.ru, version %s.' % YaFotkiLib.VERSION)
        print('For more information and new versions, visit http://svetlyak.ru.')
        sys.exit(0)

    if options.upload:
        print('Please, don\'t use \'--upload\' option anymore.\nIt will be removed in the future versions.\nJust pass files list after all other options.')

    if options.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    else:
        logger = logging.getLogger()
        logger.setLevel(logging.INFO)
        logger.handlers[0].setFormatter(logging.Formatter('%(message)s'))

    try:
        yafotki = init_uploader(options)
    except YaFotkiLib.AuthError, e:
        print e
        sys.exit(3)


    if options.album_list:
        print_albums(check_and_get_albums(yafotki, options))
    else:
        albums = check_and_get_albums(yafotki, options, needalbum=True)
        album = albums[options.album-1]
        if args:
            for file in args:
                print 'Uploading %s into album "%s"' % (file, album[1].encode(locale.getlocale()[1]))
                yafotki.post(file, album[0])
            if options.last_list:
                for url in getLastURLs(yafotki.username, album[0], limit=len(args)):
                    print url, 'uploaded'
        elif options.last_list:
            for url in getLastURLs(yafotki.username, album[0]):
                print url
        else:
            print 'Please, specify --upload, --url or --albums option.'
    sys.exit(0)

if __name__ == "__main__":
    locale.setlocale(locale.LC_ALL, '')
    main()

